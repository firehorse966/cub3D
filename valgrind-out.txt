==369110== Memcheck, a memory error detector
==369110== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==369110== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==369110== Command: ./cub3d maps/map1.cub
==369110== Parent PID: 334640
==369110== 
==369110== Invalid write of size 4
==369110==    at 0x406D0B: mlx_put_pixel (in /home/angcampo/cursus/cub3D_git/cub3d)
==369110==    by 0x403F04: cb_paintboth (cb_drawing2.c:25)
==369110==    by 0x403927: cb_drawing (cb_drawing.c:109)
==369110==    by 0x403323: cb_raycasting (cb_raycasting.c:131)
==369110==    by 0x40296F: cb_newwindow (cb_window.c:23)
==369110==    by 0x406C25: mlx_loop (in /home/angcampo/cursus/cub3D_git/cub3d)
==369110==    by 0x402B96: cb_initgame (cb_window.c:78)
==369110==    by 0x40289B: main (cb_cub3d.c:90)
==369110==  Address 0x180481c0 is 0 bytes after a block of size 19,440,000 alloc'd
==369110==    at 0x484DA83: calloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==369110==    by 0x405E97: mlx_new_image (in /home/angcampo/cursus/cub3D_git/cub3d)
==369110==    by 0x40295C: cb_newwindow (cb_window.c:22)
==369110==    by 0x406C25: mlx_loop (in /home/angcampo/cursus/cub3D_git/cub3d)
==369110==    by 0x402B96: cb_initgame (cb_window.c:78)
==369110==    by 0x40289B: main (cb_cub3d.c:90)
==369110== 
==369110== 
==369110== HEAP SUMMARY:
==369110==     in use at exit: 317,955 bytes in 3,107 blocks
==369110==   total heap usage: 82,590 allocs, 79,483 frees, 207,957,852 bytes allocated
==369110== 
==369110== 0 bytes in 1 blocks are definitely lost in loss record 1 of 2,271
==369110==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==369110==    by 0x4005A22: malloc (rtld-malloc.h:56)
==369110==    by 0x4005A22: _dl_find_object_update (dl-find_object.c:791)
==369110==    by 0x400ECCF: dl_open_worker_begin (dl-open.c:735)
==369110==    by 0x4B36A97: _dl_catch_exception (dl-error-skeleton.c:208)
==369110==    by 0x400DF99: dl_open_worker (dl-open.c:782)
==369110==    by 0x4B36A97: _dl_catch_exception (dl-error-skeleton.c:208)
==369110==    by 0x400E34D: _dl_open (dl-open.c:883)
==369110==    by 0x4A5263B: dlopen_doit (dlopen.c:56)
==369110==    by 0x4B36A97: _dl_catch_exception (dl-error-skeleton.c:208)
==369110==    by 0x4B36B62: _dl_catch_error (dl-error-skeleton.c:227)
==369110==    by 0x4A5212D: _dlerror_run (dlerror.c:138)
==369110==    by 0x4A526C7: dlopen_implementation (dlopen.c:71)
==369110==    by 0x4A526C7: dlopen@@GLIBC_2.34 (dlopen.c:81)
==369110== 
==369110== LEAK SUMMARY:
==369110==    definitely lost: 0 bytes in 1 blocks
==369110==    indirectly lost: 0 bytes in 0 blocks
==369110==      possibly lost: 0 bytes in 0 blocks
==369110==    still reachable: 317,955 bytes in 3,106 blocks
==369110==         suppressed: 0 bytes in 0 blocks
==369110== Reachable blocks (those to which a pointer was found) are not shown.
==369110== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==369110== 
==369110== For lists of detected and suppressed errors, rerun with: -s
==369110== ERROR SUMMARY: 10 errors from 2 contexts (suppressed: 0 from 0)
